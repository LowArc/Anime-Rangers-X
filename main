--// Anime Rangers X
--// Scripted by: @ArcX

----------------------------------------------------------[[ Main ]]-------------------------------------------------------------

local OptimizeSettings = true
local RepeatFrequency = 0.1

local function autoUpgradeStats()
    task.spawn(function()
        while _G.AutoUpgradeStats do
            task.wait(RepeatFrequency)
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Gameplay"):WaitForChild("PlayerStats"):FireServer("YenGenarateLevel")
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Gameplay"):WaitForChild("PlayerStats"):FireServer("YenMaxLevel")
        end
    end)
end

local function gameVote()
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild(_G.PlayMode):FireServer()
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("OnGame"):WaitForChild("Voting"):WaitForChild("VotePlaying"):FireServer()
end

--// WhiteScreen
local function whiteScreen()
    if _G.WhiteScreen then
        game:GetService("RunService"):Set3dRenderingEnabled(false)
    end
end

--// Settings
local function optimizeSettings()
    if OptimizeSettings then
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("Abilities VFX", true)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("Low Graphic Quality", true)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("DisibleGachaChat", true)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("DisibleDamageText", true)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("Display Players Units", false)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("HeadBar", false)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Settings"):WaitForChild("Setting_Event"):FireServer("Hide Cosmetic", true)
    end
end

--// AutoPrintGacha
task.spawn(function()
    while _G.NoticeGacha do
        local Mythic = true
        local Legendary = false
        task.wait(10)

        local Gacha = game:GetService("ReplicatedStorage").Gacha.Standard
        local RateUp = game:GetService("ReplicatedStorage").Gacha.Rateup
        if Mythic then
            print("Mythic: " .. Gacha.Mythic:GetChildren()[1].Name)
            for _, v in pairs(RateUp:GetChildren()) do
                if v:IsA("StringValue") and v.Value == "Mythic" then
                    print("RateUp: " .. v.Name)
                end
            end
        end
    end
end)

---------------------------------------------------[[ Kaitun Info ]]------------------------------------------------

local Recipes = {
    RangerCrystal = {
        Name = "Ranger Crystal", 
        World = "Challenge"
    },
    ObsidianPlate = {
        Name = "Obsidian Plate", 
        World = "OnePiece",
        StageName = "Voocha Village",
        Act = 3
    },
    SoulCore = {
        Name = "Soul Core",
        World = "DemonSlayer",
        StageName = "Demon Forest",
        Act = 3
    },
    EnergyVial = {
        Name = "Energy Vial",
        World = "Namek",
        StageName = "Green Planet",
        Act = 3
    },
    CoreOfSilence = {
        Name = "Core of Silence",
        World = "Naruto",
        StageName = "Leaf Village",
        Act = 3
    },
}

-- Create Room [1]
local function createRoom()
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Create")
end

-- Create Challenge Room [1.1]
local function createChallengeRoom()
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Create", {["CreateChallengeRoom"] = true})
end

-- Change Mode [2]
local function changeMode(gameMode)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Change-Mode", {["Mode"] = gameMode})
end

-- Choose World [3]
local Worlds = {
    OnePiece = "OnePiece",
    Namek = "Namek",
    DemonSlayer = "Demon Slayer",
    Naruto = "Naruto",
    OPM = "OPM",
}
local function changeWorld(World)
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Change-World", {["World"] = World})
end

--// Chapter & RangerStage
local Chapters = {
    OnePiece = {Name = "OnePiece_"},
    Namek = {Name = "Namek_"},
    DemonSlayer = {Name = "DemonSlayer_"},
    Naruto = {Name = "Naruto_"},
    OPM = {Name = "OPM_"},
}

-- Change Chapter [4]
local function changeChapter(GameMode, World, Act)
    local StageMode 
    if GameMode == "Ranger Stage" then
        StageMode = "RangerStage"
    elseif GameMode == "Story" then
        StageMode = "Chapter"
    end
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Change-Chapter", {["Chapter"] = World .. StageMode .. tostring(Act)})
end

-- Friend Only [5]
local function changeFriendOnly()
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Change-FriendOnly")
end

-- Submit Room [6]
local function SubmitRoom()
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Submit")
end

-- Start Game [7]
local function startGame()
    if _G.AutoStartLobby then
        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event"):FireServer("Start")
    end
end

-- Farm [8]
local function grind(GameMode, World, Act) --// 1.GameMode, 2.World, 3.Act
    if GameMode == "Ranger Stage" or GameMode == "Story" then
        createRoom()
        changeMode(GameMode)
        changeWorld(World)
        changeChapter(GameMode, World, Act)
        changeFriendOnly()
        SubmitRoom()
        startGame()
    elseif GameMode == "Challenge" then
        createChallengeRoom()
        startGame()
    end
end

-- Tp To Lobby
local function toLobby()
    local teleportService = game:GetService("TeleportService")
    teleportService:Teleport(72829404259339 , game.Players.LocalPlayer)
end

-- GetNumberFromText
local function getNumberFromText(text)
    return tonumber(text:match("%d+")) or 0
end

---------------------------------------------------[[ KAITUN SUNG JIN WOO EVO ]]---------------------------------------------------

local Ranger = "Ranger Stage" 
local Story = "Story"
local Challenge = "Challenge"

local function getCurrentStage(str)
    return str:gsub("%s*%-.*", "")
end

local function checkNotificationBar()
    local NotificationBar = game:GetService("Players").LocalPlayer.PlayerGui.Notification._BAR_.BOTTOM
    for _, v in pairs(NotificationBar:GetChildren()) do
        if v:IsA("Frame") and v.Name == "form_bar" then
            return true
        end
    end
    return false
end

local function sungJinWooEvo()
    local MaterialSequence = {
        {
            name = "Obsidian Plate",
            requiredCount = 10,
            StageName = Recipes.ObsidianPlate.StageName,
            World = Recipes.ObsidianPlate.World,
            grindAction = function()
                grind(Ranger, Recipes.ObsidianPlate.World, Recipes.ObsidianPlate.Act)
            end,
        },
        {
            name = "Soul Core",
            requiredCount = 7,
            StageName = Recipes.SoulCore.StageName,
            World = Recipes.SoulCore.World,
            grindAction = function()
                grind(Ranger, Recipes.SoulCore.World, Recipes.SoulCore.Act)
            end,
        },
        {
            name = "Ranger Crystal",
            requiredCount = 18,
            StageName = Recipes.RangerCrystal.World,
            World = Recipes.RangerCrystal.World,
            grindAction = function()
                grind(Challenge)
            end,
        },
    }
    
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local itemsContainer = localPlayer.PlayerGui.Items.Main.Base.Space.Scrolling
    
    
    --// (1 = ObsidianPlate, 2 = SoulCore, 3 = RangerCrystal)
    local currentStepIndex = 1

    task.spawn(function()
        local Cooldown = false
        while _G.SungJinWoo and currentStepIndex <= #MaterialSequence do
            _G.PlayMode = "VoteNext"
            local currentMaterial = MaterialSequence[currentStepIndex]
            local materialButton  = itemsContainer:FindFirstChild(currentMaterial.name)
            local currentStage = getCurrentStage(game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Stage.Label.Text)
            if currentStepIndex == 3 then
                currentStage = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text
            end
    
            if materialButton and materialButton:IsA("TextButton") then
                local currentCount = getNumberFromText(
                    materialButton.Frame.ItemFrame.Info.Amonut.Text
                )
                print(("%s: %d / %d")
                    :format(currentMaterial.name, currentCount, currentMaterial.requiredCount)
                )
    
                if currentCount < currentMaterial.requiredCount then
                    
                    if currentStage ~= currentMaterial.StageName then 
                        currentMaterial.grindAction()
                        Cooldown = checkNotificationBar()
                    end
                else
                    print("Enough Material: ", currentMaterial.name)
                    currentStepIndex = currentStepIndex + 1
                end
            else
                warn("Item Not Found: ", currentMaterial.name)
                if currentStage ~= currentMaterial.StageName then 
                    currentMaterial.grindAction()
                    Cooldown = checkNotificationBar()
                end
            end
            task.wait(1)
            if Cooldown then
                if _G.Challenge then
                    print("Ranger Stage is Cooldowning... Switching to Challenge Mode.")
                    local saveCurrentWorld = currentMaterial.World
                    switchMode(saveCurrentWorld)
                end
                Cooldown = false
            end
        end
        if currentStepIndex > #MaterialSequence then
            print("Ready To Evolve Sung Jin Woo.")
            toLobby()
        end
    end)
end

---------------------------------------------------[[ KAITUN GOJO EVO ]]---------------------------------------------------

local function gojoEvo()
    local MaterialSequence = {
        {
            name = "Energy Vial",
            requiredCount = 5,
            StageName = Recipes.EnergyVial.StageName,
            World = Recipes.EnergyVial.World,
            grindAction = function()
                grind(Ranger, Recipes.ObsidianPlate.World, Recipes.ObsidianPlate.Act)
            end,
        },
        {
            name = "Soul Core",
            requiredCount = 5,
            StageName = Recipes.SoulCore.StageName,
            World = Recipes.SoulCore.World,
            grindAction = function()
                grind(Ranger, Recipes.SoulCore.World, Recipes.SoulCore.Act)
            end,
        },
        {
            name = "Core of Silence",
            requiredCount = 10,
            StageName = Recipes.CoreOfSilence.StageName,
            World = Recipes.CoreOfSilence.World,
            grindAction   = function()
                grind(Ranger, Recipes.CoreOfSilence.World, Recipes.CoreOfSilence.Act)
            end,
        },
        {
            name = "Ranger Crystal",
            requiredCount = 12,
            StageName = Recipes.RangerCrystal.World,
            World = Recipes.RangerCrystal.World,
            grindAction = function()
                grind(Challenge)
            end,
        },
    }
    
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local itemsContainer = localPlayer.PlayerGui.Items.Main.Base.Space.Scrolling
    
    local currentStepIndex = 1

    task.spawn(function()
        local Cooldown = false
        while _G.Gojo and currentStepIndex <= #MaterialSequence do
            _G.PlayMode = "VoteNext"
            local currentMaterial = MaterialSequence[currentStepIndex]
            local materialButton  = itemsContainer:FindFirstChild(currentMaterial.name)
            local currentStage = getCurrentStage(game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Stage.Label.Text)
            if currentStepIndex == 4 then
                currentStage = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text
            end
    
            if materialButton and materialButton:IsA("TextButton") then
                local currentCount = getNumberFromText(
                    materialButton.Frame.ItemFrame.Info.Amonut.Text
                )
                print(("%s: %d / %d")
                    :format(currentMaterial.name, currentCount, currentMaterial.requiredCount)
                )
    
                if currentCount < currentMaterial.requiredCount then
                    
                    if currentStage ~= currentMaterial.StageName then 
                        currentMaterial.grindAction()
                        Cooldown = checkNotificationBar()
                    end

                else
                    print("Enough Material: ", currentMaterial.name)
                    currentStepIndex = currentStepIndex + 1
                end
            else
                warn("Item Not Found: ", currentMaterial.name)
                if currentStage ~= currentMaterial.StageName then 
                    currentMaterial.grindAction()
                    Cooldown = checkNotificationBar()
                end
            end
            task.wait(1)
            if Cooldown then
                if _G.Challenge then
                    print("Ranger Stage is Cooldowning... Switching to Challenge Mode.")
                    local saveCurrentWorld = currentMaterial.World
                    switchMode(saveCurrentWorld)
                end
                Cooldown = false
            end
        end
        if currentStepIndex > #MaterialSequence then
            print("Ready To Evolve Gojo.")
            toLobby()
        end
    end)
end

---------------------------------------------------[[ KAITUN Switch Mode ]]-------------------------------------------------

function switchMode(saveCurrentWorld)
    task.spawn(function()
        local savedMode 
        local spawnDelay = false

        if _G.SungJinWoo then
            _G.SungJinWoo = false
            savedMode = "SungJinWoo"
        end
        if _G.Gojo then
            _G.Gojo = false
            savedMode = "Gojo"
        end

        while _G.Challenge do
            local currentStage = game:GetService("Players").LocalPlayer.PlayerGui.HUD.InGame.Main.GameInfo.Gamemode.Label.Text
            _G.PlayMode = "VoteRetry"

            if currentStage ~= "Challenge" then
                grind(Challenge)
                task.wait(1)
            end
            if not spawnDelay then
                spawnDelay = true
                task.delay(10, function()
                    local NotificationBar = game:GetService("Players").LocalPlayer.PlayerGui.Notification._BAR_.BOTTOM
                    spawnDelay = false
                    grind(Ranger, saveCurrentWorld, 1)
                    for _, v in pairs(NotificationBar:GetChildren()) do
                        if v:IsA("Frame") and v.Name == "form_bar" then
                            if savedMode == "SungJinWoo" then
                                _G.SungJinWoo = true
                                sungJinWooEvo()
                            elseif savedMode == "Gojo" then
                                _G.Gojo = true
                                gojoEvo()
                            end
                            break
                        end
                    end
                end)
            end
            task.wait(1)
        end
    end)
end

---------------------------------------------------[[ Load Script ]]------------------------------------------------------

print("Arc X - Anime Rangers X Loaded")

gojoEvo()
sungJinWooEvo()
task.spawn(function()
    while _G.AutoPlay do
        while task.wait(RepeatFrequency) do
            gameVote()
        end
    end
end)
whiteScreen()
optimizeSettings()
autoUpgradeStats()
